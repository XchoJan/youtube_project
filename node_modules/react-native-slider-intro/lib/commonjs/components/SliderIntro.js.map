{"version":3,"sources":["SliderIntro.tsx"],"names":["setDefaultState","setSlide","active","previous","marginLeft","dotMarginLeft","expectOpacityOfNext","expectOpacityOfDone","expectOpacityOfSkip","animations","_moveSlideX","Animated","Value","_moveSlideDotX","_moveSlideDotMarginX","_opacityOfNextButton","_opacityOfDoneButton","_opacityOfSkipButton","goToNewSlide","newSlide","slide","numberOfSlide","onDone","navContainerMaxSize","dotWidth","deviceMaxWidth","expectedMarginLeft","expectedMarginLeftDot","_onGestureEvent","translationX","dotMaxPossibleWidth","slidesMaxWidth","newValue","newDotWidthRawValue","newDotWidthValue","setValue","_onHandlerStateChange","limitToSlide","absoluteTranslation","onBackPress","backHandlerBehaviour","defaultProps","data","renderItem","item","index","title","text","image","backgroundColor","activeLanguage","link","slideMaxHeightPercent","navigationBarBottom","navigationBarHeight","animateSlideSpeed","navContainerMaxSizePercent","fixDotOpacity","fixDotBackgroundColor","animatedDotBackgroundColor","animateDotSpeed","animateDotBouncing","hasReactNavigation","useCustomBackHandlerEffect","skipLabel","nextLabel","doneLabel","renderSkipButton","renderNextButton","renderDoneButton","onSkip","showLeftButton","leftButtonType","columnButtonStyle","showStatusBar","statusBarColor","SliderIntro","panResponder","setPanResponder","PanResponder","create","length","arrayOfSlideIndex","Array","keys","Dimensions","get","width","buttonsMaxSize","isLastSlide","panResponderItem","onStartShouldSetPanResponder","onMoveShouldSetPanResponder","_","gestureState","dx","dy","onMoveShouldSetPanResponderCapture","onStartShouldSetPanResponderCapture","onPanResponderMove","gesture","onPanResponderRelease","animateSlide","spring","toValue","speed","bounciness","useNativeDriver","animateDotWidth","animateDotMarginLeft","animateOpacityOfNext","animateOpacityOfDone","animateOpacityOfSkip","parallel","start","BackHandler","addEventListener","removeEventListener","styles","container","maxWidth","panHandlers","map","navContainer","bottom","height","maxHeight","navigation","flexDirection","StyleSheet","flex","position","justifyContent","alignItems","prevContainer","prevButton","prevText","textTransform","fontWeight","color","fontSize"],"mappings":";;;;;;;;AAAA;;AACA;;AASA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;;;;;;;;;AAEA,MAAMA,eAAe,GAAIC,QAAD,IAAsC;AAC5DA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,MAAM,EAAE,CADD;AAEPC,IAAAA,QAAQ,EAAE,CAFH;AAGPC,IAAAA,UAAU,EAAE,CAHL;AAIPC,IAAAA,aAAa,EAAE,CAJR;AAKPC,IAAAA,mBAAmB,EAAE,CALd;AAMPC,IAAAA,mBAAmB,EAAE,CANd;AAOPC,IAAAA,mBAAmB,EAAE,CAPd;AAQPC,IAAAA,UAAU,EAAE;AACVC,MAAAA,WAAW,EAAE,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CADH;AAEVC,MAAAA,cAAc,EAAE,IAAIF,sBAASC,KAAb,CAAmB,CAAnB,CAFN;AAGVE,MAAAA,oBAAoB,EAAE,IAAIH,sBAASC,KAAb,CAAmB,CAAnB,CAHZ;AAIVG,MAAAA,oBAAoB,EAAE,IAAIJ,sBAASC,KAAb,CAAmB,CAAnB,CAJZ;AAKVI,MAAAA,oBAAoB,EAAE,IAAIL,sBAASC,KAAb,CAAmB,CAAnB,CALZ;AAMVK,MAAAA,oBAAoB,EAAE,IAAIN,sBAASC,KAAb,CAAmB,CAAnB;AANZ;AARL,GAAD,CAAR;AAiBD,CAlBD;;AAoBA,MAAMM,YAAY,GAAG,CACnBC,QADmB,EAEnBC,KAFmB,EAGnBnB,QAHmB,EAInBoB,aAJmB,EAKnBC,MALmB,EAMnBC,mBANmB,EAOnBC,QAPmB,EAQnBC,cARmB,KAShB;AACH,MAAIN,QAAQ,GAAG,CAAf,EAAkB;AAChB;AACD;;AACD,MAAIA,QAAQ,GAAGE,aAAa,GAAG,CAA/B,EAAkC;AAChCrB,IAAAA,eAAe,CAACC,QAAD,CAAf;AACAqB,IAAAA,MAAM;AACN;AACD;;AAED,MAAIhB,mBAAmB,GAAG,CAA1B;AACA,MAAIC,mBAAmB,GAAG,CAA1B;AACA,MAAIC,mBAAmB,GAAG,CAA1B;AACA,MAAIkB,kBAAkB,GAAG,CAAzB;AACA,MAAIC,qBAAqB,GACtBR,QAAQ,IAAII,mBAAmB,GAAGF,aAAa,GAAGG,QAA1C,CAAT,IACGH,aAAa,GAAG,CADnB,IAEAF,QAAQ,GAAGK,QAHb;;AAKA,MAAIL,QAAQ,KAAKE,aAAa,GAAG,CAAjC,EAAoC;AAClCf,IAAAA,mBAAmB,GAAG,CAAtB;AACAC,IAAAA,mBAAmB,GAAG,CAAtB;AACAC,IAAAA,mBAAmB,GAAG,CAAtB;AACD,GAJD,MAIO;AACLF,IAAAA,mBAAmB,GAAG,CAAtB;AACAC,IAAAA,mBAAmB,GAAG,CAAtB;AACAC,IAAAA,mBAAmB,GAAG,CAAtB;AACD;;AAED,QAAM;AAAEN,IAAAA,MAAF;AAAUE,IAAAA,UAAV;AAAsBK,IAAAA;AAAtB,MAAqCW,KAA3C;AACA,QAAM;AACJV,IAAAA,WADI;AAEJG,IAAAA,cAFI;AAGJC,IAAAA,oBAHI;AAIJC,IAAAA,oBAJI;AAKJC,IAAAA,oBALI;AAMJC,IAAAA;AANI,MAOFR,UAPJ;;AASA,MAAIU,QAAQ,GAAGjB,MAAf,EAAuB;AACrBwB,IAAAA,kBAAkB,GAAG,EAAEP,QAAQ,GAAGM,cAAb,CAArB;AACD,GAFD,MAEO,IAAIN,QAAQ,GAAGjB,MAAf,EAAuB;AAC5BwB,IAAAA,kBAAkB,GAAG,EAAEP,QAAQ,GAAGM,cAAb,CAArB;AACD,GAFM,MAEA;AACLC,IAAAA,kBAAkB,GAAGtB,UAArB;AACD;;AACDH,EAAAA,QAAQ,CAAC;AACPC,IAAAA,MAAM,EAAEiB,QADD;AAEPhB,IAAAA,QAAQ,EAAED,MAFH;AAGPG,IAAAA,aAAa,EAAEsB,qBAHR;AAIPvB,IAAAA,UAAU,EAAEsB,kBAJL;AAKPpB,IAAAA,mBAAmB,EAAEA,mBALd;AAMPC,IAAAA,mBAAmB,EAAEA,mBANd;AAOPC,IAAAA,mBAAmB,EAAEA,mBAPd;AAQPC,IAAAA,UAAU,EAAE;AACVC,MAAAA,WAAW,EAAEA,WADH;AAEVG,MAAAA,cAAc,EAAEA,cAFN;AAGVC,MAAAA,oBAAoB,EAAEA,oBAHZ;AAIVC,MAAAA,oBAAoB,EAAEA,oBAJZ;AAKVC,MAAAA,oBAAoB,EAAEA,oBALZ;AAMVC,MAAAA,oBAAoB,EAAEA;AANZ;AARL,GAAD,CAAR;AAiBD,CAxED;;AA0EA,MAAMW,eAAe,GAAG,CACtBC,YADsB,EAEtBT,KAFsB,EAGtBU,mBAHsB,EAItBL,cAJsB,EAKtBD,QALsB,EAMtBO,cANsB,KAOnB;AACH,QAAM;AAAE3B,IAAAA,UAAF;AAAcC,IAAAA,aAAd;AAA6BI,IAAAA;AAA7B,MAA4CW,KAAlD;AACA,QAAM;AAAEV,IAAAA,WAAF;AAAeG,IAAAA,cAAf;AAA+BC,IAAAA;AAA/B,MAAwDL,UAA9D;AACA,QAAMuB,QAAQ,GAAGH,YAAY,GAAGzB,UAAhC;AACA,QAAM6B,mBAAmB,GACvBH,mBAAmB,IAAIL,cAAc,GAAGI,YAArB,CADrB;AAEA,QAAMK,gBAAgB,GACpBL,YAAY,GAAG,CAAf,GAAmB,CAAC,CAAD,GAAKI,mBAAxB,GAA8CA,mBADhD;;AAGA,MAAID,QAAQ,GAAG,CAAf,EAAkB;AAChBlB,IAAAA,oBAAoB,CAACqB,QAArB,CAA8B9B,aAA9B;;AACAK,IAAAA,WAAW,CAACyB,QAAZ,CAAqB,CAArB;;AACAtB,IAAAA,cAAc,CAACsB,QAAf,CAAwBX,QAAxB;AACD,GAJD,MAIO,IAAIQ,QAAQ,GAAG,CAACD,cAAhB,EAAgC;AACrCjB,IAAAA,oBAAoB,CAACqB,QAArB,CAA8B9B,aAA9B;;AACAK,IAAAA,WAAW,CAACyB,QAAZ,CAAqB/B,UAArB;;AACAS,IAAAA,cAAc,CAACsB,QAAf,CAAwBX,QAAxB;AACD,GAJM,MAIA;AACLd,IAAAA,WAAW,CAACyB,QAAZ,CAAqBH,QAArB;;AAEA,QAAIE,gBAAgB,IAAIV,QAAxB,EAAkC;AAChCV,MAAAA,oBAAoB,CAACqB,QAArB,CAA8B9B,aAA9B;;AACAQ,MAAAA,cAAc,CAACsB,QAAf,CAAwBX,QAAxB;AACD,KAHD,MAGO;AACL,UAAIK,YAAY,GAAG,CAAnB,EAAsB;AACpBf,QAAAA,oBAAoB,CAACqB,QAArB,CAA8B9B,aAA9B;AACD,OAFD,MAEO;AACLS,QAAAA,oBAAoB,CAACqB,QAArB,CACE9B,aAAa,GAAG6B,gBAAhB,GAAmCV,QADrC;AAGD;;AACDX,MAAAA,cAAc,CAACsB,QAAf,CAAwBD,gBAAxB;AACD;AACF;AACF,CAzCD;;AA2CA,MAAME,qBAAqB,GAAG,CAC5BP,YAD4B,EAE5BT,KAF4B,EAG5BW,cAH4B,EAI5BM,YAJ4B,EAK5BpC,QAL4B,EAM5BoB,aAN4B,EAO5BC,MAP4B,EAQ5BC,mBAR4B,EAS5BC,QAT4B,EAU5BC,cAV4B,KAWzB;AACH,QAAM;AAAErB,IAAAA,UAAF;AAAcF,IAAAA;AAAd,MAAyBkB,KAA/B;AACA,QAAMY,QAAQ,GAAGH,YAAY,GAAGzB,UAAhC;;AACA,MAAI4B,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAACD,cAAlC,EAAkD;AAChD,QAAIO,mBAAmB,GAAG,CAA1B;;AACA,QAAIT,YAAY,GAAG,CAAnB,EAAsB;AACpBS,MAAAA,mBAAmB,GAAGT,YAAY,GAAG,CAAC,CAAtC;;AACA,UAAIS,mBAAmB,GAAGD,YAA1B,EAAwC;AACtCnB,QAAAA,YAAY,CACVhB,MAAM,GAAG,CADC,EAEVkB,KAFU,EAGVnB,QAHU,EAIVoB,aAJU,EAKVC,MALU,EAMVC,mBANU,EAOVC,QAPU,EAQVC,cARU,CAAZ;AAUD,OAXD,MAWO;AACLP,QAAAA,YAAY,CACVhB,MADU,EAEVkB,KAFU,EAGVnB,QAHU,EAIVoB,aAJU,EAKVC,MALU,EAMVC,mBANU,EAOVC,QAPU,EAQVC,cARU,CAAZ;AAUD;AACF,KAzBD,MAyBO;AACLa,MAAAA,mBAAmB,GAAGT,YAAtB;;AACA,UAAIS,mBAAmB,GAAGD,YAA1B,EAAwC;AACtCnB,QAAAA,YAAY,CACVhB,MAAM,GAAG,CADC,EAEVkB,KAFU,EAGVnB,QAHU,EAIVoB,aAJU,EAKVC,MALU,EAMVC,mBANU,EAOVC,QAPU,EAQVC,cARU,CAAZ;AAUD,OAXD,MAWO;AACLP,QAAAA,YAAY,CACVhB,MADU,EAEVkB,KAFU,EAGVnB,QAHU,EAIVoB,aAJU,EAKVC,MALU,EAMVC,mBANU,EAOVC,QAPU,EAQVC,cARU,CAAZ;AAUD;AACF;AACF;AACF,CApED;;AAsEA,MAAMc,WAAW,GAAG,CAClBC,oBADkB,EAElBpB,KAFkB,EAGlBnB,QAHkB,EAIlBoB,aAJkB,EAKlBC,MALkB,EAMlBC,mBANkB,EAOlBC,QAPkB,EAQlBC,cARkB,KASf;AACH,QAAM;AAAEvB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAuBiB,KAA7B;AACAoB,EAAAA,oBAAoB,KAAK,gBAAzB,GACItB,YAAY,CACVhB,MAAM,GAAG,CADC,EAEVkB,KAFU,EAGVnB,QAHU,EAIVoB,aAJU,EAKVC,MALU,EAMVC,mBANU,EAOVC,QAPU,EAQVC,cARU,CADhB,GAWIP,YAAY,CACVf,QADU,EAEViB,KAFU,EAGVnB,QAHU,EAIVoB,aAJU,EAKVC,MALU,EAMVC,mBANU,EAOVC,QAPU,EAQVC,cARU,CAXhB;AAqBA,SAAO,IAAP;AACD,CAjCD;;AAmCA,MAAMgB,YAA0B,GAAG;AACjCC,EAAAA,IAAI,EAAE,EAD2B;AAEjCC,EAAAA,UAAU,EAAGC,IAAD,IAAiB;AAC3B,UAAM;AACJC,MAAAA,KADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,IAHI;AAIJC,MAAAA,KAJI;AAKJC,MAAAA,eALI;AAMJC,MAAAA,cANI;AAOJC,MAAAA,IAPI;AAQJC,MAAAA;AARI,QASFR,IATJ;AAUA,wBACE,6BAAC,aAAD;AACE,MAAA,GAAG,EAAEC,KADP;AAEE,MAAA,KAAK,EAAEA,KAFT;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,IAAI,EAAEC,IAJR;AAKE,MAAA,KAAK,EAAEC,KALT;AAME,MAAA,eAAe,EAAEC,eANnB;AAOE,MAAA,cAAc,EAAEC,cAPlB;AAQE,MAAA,IAAI,EAAEC,IARR;AASE,MAAA,qBAAqB,EAAEC;AATzB,MADF;AAaD,GA1BgC;AA2BjCC,EAAAA,mBAAmB,EAAE,CA3BY;AA4BjCC,EAAAA,mBAAmB,EAAE,EA5BY;AA6BjCC,EAAAA,iBAAiB,EAAE,EA7Bc;AA8BjCC,EAAAA,0BAA0B,EAAE,GA9BK;AA+BjChC,EAAAA,QAAQ,EAAE,EA/BuB;AAgCjCiC,EAAAA,aAAa,EAAE,IAhCkB;AAiCjCC,EAAAA,qBAAqB,EAAE,MAjCU;AAkCjCC,EAAAA,0BAA0B,EAAE,OAlCK;AAmCjCC,EAAAA,eAAe,EAAE,CAnCgB;AAoCjCC,EAAAA,kBAAkB,EAAE,CApCa;AAqCjCrB,EAAAA,oBAAoB,EAAE,gBArCW;AAsCjCsB,EAAAA,kBAAkB,EAAE,KAtCa;AAuCjCC,EAAAA,0BAA0B,EAAE,MAAM,CAAE,CAvCH;AAwCjCC,EAAAA,SAAS,EAAE,MAxCsB;AAyCjCC,EAAAA,SAAS,EAAE,MAzCsB;AA0CjCC,EAAAA,SAAS,EAAE,MA1CsB;AA2CjCC,EAAAA,gBAAgB,EAAGH,SAAD,iBAChB,6BAAC,mBAAD;AAAY,IAAA,SAAS,EAAEA;AAAvB,IA5C+B;AA8CjCI,EAAAA,gBAAgB,EAAGH,SAAD,iBAChB,6BAAC,mBAAD;AAAY,IAAA,SAAS,EAAEA;AAAvB,IA/C+B;AAiDjCI,EAAAA,gBAAgB,EAAGH,SAAD,iBAChB,6BAAC,mBAAD;AAAY,IAAA,SAAS,EAAEA;AAAvB,IAlD+B;AAoDjC5C,EAAAA,MAAM,EAAE,MAAM,CAAE,CApDiB;AAqDjCgD,EAAAA,MAAM,EAAE,MAAM,CAAE,CArDiB;AAsDjCC,EAAAA,cAAc,EAAE,IAtDiB;AAuDjCC,EAAAA,cAAc,EAAE,MAvDiB;AAwDjCC,EAAAA,iBAAiB,EAAE,KAxDc;AAyDjCC,EAAAA,aAAa,EAAE,KAzDkB;AA0DjCC,EAAAA,cAAc,EAAE;AA1DiB,CAAnC;;AA6DO,SAASC,WAAT,CAAqB;AAC1BlC,EAAAA,IAD0B;AAE1BC,EAAAA,UAF0B;AAG1BU,EAAAA,mBAH0B;AAI1BC,EAAAA,mBAJ0B;AAK1BC,EAAAA,iBAL0B;AAM1BC,EAAAA,0BAN0B;AAO1BhC,EAAAA,QAP0B;AAQ1BiC,EAAAA,aAR0B;AAS1BC,EAAAA,qBAT0B;AAU1BC,EAAAA,0BAV0B;AAW1BC,EAAAA,eAX0B;AAY1BC,EAAAA,kBAZ0B;AAa1BrB,EAAAA,oBAb0B;AAc1BsB,EAAAA,kBAd0B;AAe1BC,EAAAA,0BAf0B;AAgB1BC,EAAAA,SAhB0B;AAiB1BC,EAAAA,SAjB0B;AAkB1BC,EAAAA,SAlB0B;AAmB1BC,EAAAA,gBAnB0B;AAoB1BC,EAAAA,gBApB0B;AAqB1BC,EAAAA,gBArB0B;AAsB1BC,EAAAA,MAtB0B;AAuB1BhD,EAAAA,MAvB0B;AAwB1BiD,EAAAA,cAxB0B;AAyB1BC,EAAAA,cAzB0B;AA0B1BC,EAAAA,iBA1B0B;AA2B1BC,EAAAA,aA3B0B;AA4B1BC,EAAAA;AA5B0B,CAArB,EA6BU;AACf,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkC,qBAASC,0BAAaC,MAAb,CAAoB,EAApB,CAAT,CAAxC;AACA,QAAM,CAAC5D,KAAD,EAAQnB,QAAR,IAAoB,qBAAiB;AACzCC,IAAAA,MAAM,EAAE,CADiC;AAEzCC,IAAAA,QAAQ,EAAE,CAF+B;AAGzCC,IAAAA,UAAU,EAAE,CAH6B;AAIzCC,IAAAA,aAAa,EAAE,CAJ0B;AAKzCC,IAAAA,mBAAmB,EAAE,CALoB;AAMzCC,IAAAA,mBAAmB,EAAE,CANoB;AAOzCC,IAAAA,mBAAmB,EAAE,CAPoB;AAQzCC,IAAAA,UAAU,EAAE;AACVC,MAAAA,WAAW,EAAE,IAAIC,sBAASC,KAAb,CAAmB,CAAnB,CADH;AAEVC,MAAAA,cAAc,EAAE,IAAIF,sBAASC,KAAb,CAAmB,CAAnB,CAFN;AAGVE,MAAAA,oBAAoB,EAAE,IAAIH,sBAASC,KAAb,CAAmB,CAAnB,CAHZ;AAIVG,MAAAA,oBAAoB,EAAE,IAAIJ,sBAASC,KAAb,CAAmB,CAAnB,CAJZ;AAKVI,MAAAA,oBAAoB,EAAE,IAAIL,sBAASC,KAAb,CAAmB,CAAnB,CALZ;AAMVK,MAAAA,oBAAoB,EAAE,IAAIN,sBAASC,KAAb,CAAmB,CAAnB;AANZ;AAR6B,GAAjB,CAA1B;AAkBA,QAAM;AAAEqE,IAAAA,MAAM,EAAE5D,aAAa,GAAG;AAA1B,MAAgCqB,IAAtC;AACA,QAAMwC,iBAAiB,GAAG,CAAC,GAAGC,KAAK,CAAC9D,aAAD,CAAL,CAAqB+D,IAArB,EAAJ,CAA1B;;AACA,QAAM3D,cAAc,GAAG4D,wBAAWC,GAAX,CAAe,QAAf,EAAyBC,KAAhD;;AACA,QAAMlD,YAAY,GAAGZ,cAAc,GAAG,GAAtC;AACA,QAAMM,cAAc,GAAG,CAACV,aAAa,GAAG,CAAjB,IAAsBI,cAA7C;AACA,QAAMF,mBAAmB,GAAGE,cAAc,GAAG+B,0BAA7C;AACA,QAAMgC,cAAc,GAAG,CAAC/D,cAAc,GAAGF,mBAAlB,IAAyC,CAAzC,GAA6C,CAApE;AACA,QAAMO,mBAAmB,GAAGP,mBAAmB,IAAIF,aAAa,GAAG,CAApB,CAAnB,GAA4C,CAAxE;AAEA,QAAM;AACJnB,IAAAA,MADI;AAEJE,IAAAA,UAFI;AAGJK,IAAAA,UAHI;AAIJJ,IAAAA,aAJI;AAKJC,IAAAA,mBALI;AAMJC,IAAAA,mBANI;AAOJC,IAAAA;AAPI,MAQFY,KARJ;AASA,QAAM;AACJV,IAAAA,WADI;AAEJG,IAAAA,cAFI;AAGJC,IAAAA,oBAHI;AAIJC,IAAAA,oBAJI;AAKJC,IAAAA,oBALI;AAMJC,IAAAA;AANI,MAOFR,UAPJ;AASA,QAAMgF,WAAW,GAAGvF,MAAM,GAAG,CAAT,KAAemB,aAAnC;AAEA,wBAAU,MAAM;AACd,UAAMqE,gBAAgB,GAAGX,0BAAaC,MAAb,CAAoB;AAC3CW,MAAAA,4BAA4B,EAAE,MAAM,KADO;AAE3CC,MAAAA,2BAA2B,EAAE,CAACC,CAAD,EAAIC,YAAJ,KAAqB;AAChD,eAAOA,YAAY,CAACC,EAAb,IAAmB,CAAnB,IAAwBD,YAAY,CAACE,EAAb,IAAmB,CAAlD;AACD,OAJ0C;AAK3CC,MAAAA,kCAAkC,EAAE,CAACJ,CAAD,EAAIC,YAAJ,KAAqB;AACvD,eAAOA,YAAY,CAACC,EAAb,IAAmB,CAAnB,IAAwBD,YAAY,CAACE,EAAb,IAAmB,CAAlD;AACD,OAP0C;AAQ3CE,MAAAA,mCAAmC,EAAE,MAAM,KARA;AAS3CC,MAAAA,kBAAkB,EAAE,CAACN,CAAD,EAAIO,OAAJ,KAAgB;AAClCxE,QAAAA,eAAe,CACbwE,OAAO,CAACL,EADK,EAEb3E,KAFa,EAGbU,mBAHa,EAIbL,cAJa,EAKbD,QALa,EAMbO,cANa,CAAf;AAQD,OAlB0C;AAmB3CsE,MAAAA,qBAAqB,EAAE,CAACR,CAAD,EAAIO,OAAJ,KAAgB;AACrChE,QAAAA,qBAAqB,CACnBgE,OAAO,CAACL,EADW,EAEnB3E,KAFmB,EAGnBW,cAHmB,EAInBM,YAJmB,EAKnBpC,QALmB,EAMnBoB,aANmB,EAOnBC,MAPmB,EAQnBC,mBARmB,EASnBC,QATmB,EAUnBC,cAVmB,CAArB;AAYD;AAhC0C,KAApB,CAAzB;;AAkCAqD,IAAAA,eAAe,CAACY,gBAAD,CAAf;;AACA,UAAMY,YAAY,GAAG3F,sBAAS4F,MAAT,CAAgB7F,WAAhB,EAA6B;AAChD8F,MAAAA,OAAO,EAAEpG,UADuC;AAEhDqG,MAAAA,KAAK,EAAElD,iBAFyC;AAGhDmD,MAAAA,UAAU,EAAE7C,kBAHoC;AAIhD8C,MAAAA,eAAe,EAAE;AAJ+B,KAA7B,CAArB;;AAMA,UAAMC,eAAe,GAAGjG,sBAAS4F,MAAT,CAAgB1F,cAAhB,EAAgC;AACtD2F,MAAAA,OAAO,EAAEhF,QAD6C;AAEtDiF,MAAAA,KAAK,EAAE7C,eAF+C;AAGtD8C,MAAAA,UAAU,EAAE7C,kBAH0C;AAItD8C,MAAAA,eAAe,EAAE;AAJqC,KAAhC,CAAxB;;AAMA,UAAME,oBAAoB,GAAGlG,sBAAS4F,MAAT,CAAgBzF,oBAAhB,EAAsC;AACjE0F,MAAAA,OAAO,EAAEnG,aADwD;AAEjEoG,MAAAA,KAAK,EAAE7C,eAF0D;AAGjE8C,MAAAA,UAAU,EAAE7C,kBAHqD;AAIjE8C,MAAAA,eAAe,EAAE;AAJgD,KAAtC,CAA7B;;AAMA,UAAMG,oBAAoB,GAAGnG,sBAAS4F,MAAT,CAAgBxF,oBAAhB,EAAsC;AACjEyF,MAAAA,OAAO,EAAElG,mBADwD;AAEjEmG,MAAAA,KAAK,EAAE7C,eAF0D;AAGjE8C,MAAAA,UAAU,EAAE7C,kBAHqD;AAIjE8C,MAAAA,eAAe,EAAE;AAJgD,KAAtC,CAA7B;;AAMA,UAAMI,oBAAoB,GAAGpG,sBAAS4F,MAAT,CAAgBvF,oBAAhB,EAAsC;AACjEwF,MAAAA,OAAO,EAAEjG,mBADwD;AAEjEkG,MAAAA,KAAK,EAAE7C,eAF0D;AAGjE8C,MAAAA,UAAU,EAAE7C,kBAHqD;AAIjE8C,MAAAA,eAAe,EAAE;AAJgD,KAAtC,CAA7B;;AAMA,UAAMK,oBAAoB,GAAGrG,sBAAS4F,MAAT,CAAgBtF,oBAAhB,EAAsC;AACjEuF,MAAAA,OAAO,EAAEhG,mBADwD;AAEjEiG,MAAAA,KAAK,EAAE7C,eAF0D;AAGjE8C,MAAAA,UAAU,EAAE7C,kBAHqD;AAIjE8C,MAAAA,eAAe,EAAE;AAJgD,KAAtC,CAA7B;;AAMAhG,0BAASsG,QAAT,CAAkB,CAChBX,YADgB,EAEhBM,eAFgB,EAGhBC,oBAHgB,EAIhBC,oBAJgB,EAKhBC,oBALgB,EAMhBC,oBANgB,CAAlB,EAOGE,KAPH;AAQD,GAhFD,EAgFG,CAAC9F,KAAD,CAhFH,EAjDe,CAmIf;AACA;;AACA,MAAI0C,kBAAJ,EAAwB;AACtBC,IAAAA,0BAA0B,CACxB7D,MADwB,EAExBqC,WAFwB,EAGxBC,oBAHwB,EAIxBpB,KAJwB,EAKxBnB,QALwB,EAMxBoB,aANwB,EAOxBC,MAPwB,EAQxBC,mBARwB,EASxBC,QATwB,EAUxBC,cAVwB,CAA1B;AAYD,GAbD,MAaO;AACL,0BAAU,MAAM;AACd0F,+BAAYC,gBAAZ,CAA6B,mBAA7B,EAAkD,MAChD7E,WAAW,CACTC,oBADS,EAETpB,KAFS,EAGTnB,QAHS,EAIToB,aAJS,EAKTC,MALS,EAMTC,mBANS,EAOTC,QAPS,EAQTC,cARS,CADb;;AAaA,aAAO,MACL0F,yBAAYE,mBAAZ,CAAgC,mBAAhC,EAAqD,MACnD9E,WAAW,CACTC,oBADS,EAETpB,KAFS,EAGTnB,QAHS,EAIToB,aAJS,EAKTC,MALS,EAMTC,mBANS,EAOTC,QAPS,EAQTC,cARS,CADb,CADF;AAaD,KA3BD,EA2BG,CAACvB,MAAD,CA3BH;AA4BD;;AAED,sBACE,4DACGwE,aAAa,iBAAI,6BAAC,2BAAD;AAAoB,IAAA,eAAe,EAAEC;AAArC,IADpB,eAEE,6BAAC,qBAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL2C,MAAM,CAACC,SADF,EAEL;AACEC,MAAAA,QAAQ,EAAEnG,aAAa,GAAGI,cAD5B;AAEErB,MAAAA,UAAU,EAAEM;AAFd,KAFK;AADT,KAQMmE,YAAY,CAAC4C,WARnB,GAUG/E,IAAI,CAACgF,GAAL,CAAS,CAAC9E,IAAD,EAAcC,KAAd,KAAgC;AACxC,wBACE,6BAAC,iBAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,KAAK,EAAE;AACL0C,QAAAA,KAAK,EAAE9D;AADF;AAFT,OAMGkB,UAAU,CAACC,IAAD,CANb,CADF;AAUD,GAXA,CAVH,CAFF,eAyBE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACL0E,MAAM,CAACK,YADF,EAEL;AACEC,MAAAA,MAAM,EAAEvE,mBADV;AAEEwE,MAAAA,MAAM,EAAEvE,mBAFV;AAGEwE,MAAAA,SAAS,EAAExE;AAHb,KAFK;AADT,kBAUE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACLgE,MAAM,CAACS,UADF,EAEL;AAAEC,MAAAA,aAAa,EAAEvD,iBAAiB,GAAG,QAAH,GAAc;AAAhD,KAFK;AADT,KAMGA,iBAAiB,gBAChB,yEACE,6BAAC,qBAAD;AACE,IAAA,mBAAmB,EAAElD,mBADvB;AAEE,IAAA,iBAAiB,EAAE2D,iBAFrB;AAGE,IAAA,qBAAqB,EAAExB,qBAHzB;AAIE,IAAA,aAAa,EAAED,aAJjB;AAKE,IAAA,QAAQ,EAAEjC,QALZ;AAME,IAAA,cAAc,EAAEX,cANlB;AAOE,IAAA,oBAAoB,EAAEC,oBAPxB;AAQE,IAAA,0BAA0B,EAAE6C;AAR9B,IADF,eAWE,6BAAC,sBAAD;AACE,IAAA,YAAY,EAAEzC,YADhB;AAEE,IAAA,KAAK,EAAEE,KAFT;AAGE,IAAA,QAAQ,EAAEnB,QAHZ;AAIE,IAAA,aAAa,EAAEoB,aAJjB;AAKE,IAAA,MAAM,EAAEC,MALV;AAME,IAAA,mBAAmB,EAAEC,mBANvB;AAOE,IAAA,QAAQ,EAAEC,QAPZ;AAQE,IAAA,cAAc,EAAEC,cARlB;AASE,IAAA,gBAAgB,EAAE,MAAM2C,gBAAgB,CAACH,SAAD,CAT1C;AAUE,IAAA,gBAAgB,EAAE,MAAMI,gBAAgB,CAACH,SAAD,CAV1C;AAWE,IAAA,WAAW,EAAEuB,WAXf;AAYE,IAAA,cAAc,EAAED;AAZlB,IAXF,eAyBE,6BAAC,sBAAD;AACE,IAAA,eAAe,EAAE,MAAMxF,eAAe,CAACC,QAAD,CADxC;AAEE,IAAA,MAAM,EAAEqE,MAFV;AAGE,IAAA,cAAc,EAAEkB,cAHlB;AAIE,IAAA,oBAAoB,EAAEvE,oBAJxB;AAKE,IAAA,gBAAgB,EAAE,MAAMkD,gBAAgB,CAACH,SAAD,CAL1C;AAME,IAAA,IAAI,EAAEQ,cANR;AAOE,IAAA,YAAY,EAAEtD,YAPhB;AAQE,IAAA,KAAK,EAAEE,KART;AASE,IAAA,QAAQ,EAAEnB,QATZ;AAUE,IAAA,aAAa,EAAEoB,aAVjB;AAWE,IAAA,MAAM,EAAEC,MAXV;AAYE,IAAA,mBAAmB,EAAEC,mBAZvB;AAaE,IAAA,QAAQ,EAAEC,QAbZ;AAcE,IAAA,cAAc,EAAEC,cAdlB;AAeE,IAAA,cAAc,EAAE8C;AAflB,IAzBF,CADgB,gBA6ChB,yEACE,6BAAC,sBAAD;AACE,IAAA,eAAe,EAAE,MAAMvE,eAAe,CAACC,QAAD,CADxC;AAEE,IAAA,MAAM,EAAEqE,MAFV;AAGE,IAAA,cAAc,EAAEkB,cAHlB;AAIE,IAAA,oBAAoB,EAAEvE,oBAJxB;AAKE,IAAA,gBAAgB,EAAE,MAAMkD,gBAAgB,CAACH,SAAD,CAL1C;AAME,IAAA,IAAI,EAAEQ,cANR;AAOE,IAAA,YAAY,EAAEtD,YAPhB;AAQE,IAAA,KAAK,EAAEE,KART;AASE,IAAA,QAAQ,EAAEnB,QATZ;AAUE,IAAA,aAAa,EAAEoB,aAVjB;AAWE,IAAA,MAAM,EAAEC,MAXV;AAYE,IAAA,mBAAmB,EAAEC,mBAZvB;AAaE,IAAA,QAAQ,EAAEC,QAbZ;AAcE,IAAA,cAAc,EAAEC,cAdlB;AAeE,IAAA,cAAc,EAAE8C;AAflB,IADF,eAkBE,6BAAC,qBAAD;AACE,IAAA,mBAAmB,EAAEhD,mBADvB;AAEE,IAAA,iBAAiB,EAAE2D,iBAFrB;AAGE,IAAA,qBAAqB,EAAExB,qBAHzB;AAIE,IAAA,aAAa,EAAED,aAJjB;AAKE,IAAA,QAAQ,EAAEjC,QALZ;AAME,IAAA,cAAc,EAAEX,cANlB;AAOE,IAAA,oBAAoB,EAAEC,oBAPxB;AAQE,IAAA,0BAA0B,EAAE6C;AAR9B,IAlBF,eA4BE,6BAAC,sBAAD;AACE,IAAA,YAAY,EAAEzC,YADhB;AAEE,IAAA,KAAK,EAAEE,KAFT;AAGE,IAAA,QAAQ,EAAEnB,QAHZ;AAIE,IAAA,aAAa,EAAEoB,aAJjB;AAKE,IAAA,MAAM,EAAEC,MALV;AAME,IAAA,mBAAmB,EAAEC,mBANvB;AAOE,IAAA,QAAQ,EAAEC,QAPZ;AAQE,IAAA,cAAc,EAAEC,cARlB;AASE,IAAA,gBAAgB,EAAE,MAAM2C,gBAAgB,CAACH,SAAD,CAT1C;AAUE,IAAA,gBAAgB,EAAE,MAAMI,gBAAgB,CAACH,SAAD,CAV1C;AAWE,IAAA,WAAW,EAAEuB,WAXf;AAYE,IAAA,cAAc,EAAED;AAZlB,IA5BF,CAnDJ,CAVF,CAzBF,CADF;AAuID;;AAEDZ,WAAW,CAACnC,YAAZ,GAA2BA,YAA3B;;AAEA,MAAM6E,MAAM,GAAGW,wBAAWjD,MAAX,CAAkB;AAC/BuC,EAAAA,SAAS,EAAE;AACTW,IAAAA,IAAI,EAAE,CADG;AAETF,IAAAA,aAAa,EAAE;AAFN,GADoB;AAK/BL,EAAAA,YAAY,EAAE;AACZQ,IAAAA,QAAQ,EAAE,UADE;AAEZ5C,IAAAA,KAAK,EAAE,MAFK;AAGZiC,IAAAA,QAAQ,EAAE,MAHE;AAIZU,IAAAA,IAAI,EAAE,CAJM;AAKZF,IAAAA,aAAa,EAAE,QALH;AAMZI,IAAAA,cAAc,EAAE,UANJ;AAOZC,IAAAA,UAAU,EAAE;AAPA,GALiB;AAc/BN,EAAAA,UAAU,EAAE;AACVG,IAAAA,IAAI,EAAE,CADI;AAEVF,IAAAA,aAAa,EAAE,KAFL;AAGVI,IAAAA,cAAc,EAAE,eAHN;AAIVC,IAAAA,UAAU,EAAE;AAJF,GAdmB;AAoB/BC,EAAAA,aAAa,EAAE;AACbJ,IAAAA,IAAI,EAAE,CADO;AAEbE,IAAAA,cAAc,EAAE,QAFH;AAGbC,IAAAA,UAAU,EAAE;AAHC,GApBgB;AAyB/BE,EAAAA,UAAU,EAAE;AACVL,IAAAA,IAAI,EAAE,CADI;AAEVF,IAAAA,aAAa,EAAE,KAFL;AAGVK,IAAAA,UAAU,EAAE;AAHF,GAzBmB;AA8B/BG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,aAAa,EAAE,WADP;AAERC,IAAAA,UAAU,EAAE,MAFJ;AAGRC,IAAAA,KAAK,EAAE,OAHC;AAIRC,IAAAA,QAAQ,EAAE;AAJF;AA9BqB,CAAlB,CAAf;;eAsCehE,W","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Animated,\r\n  Dimensions,\r\n  View,\r\n  BackHandler,\r\n  StyleSheet,\r\n  PanResponder,\r\n} from 'react-native';\r\nimport { ISlide } from '../interfaces/ISlide.interface';\r\nimport SkipButton from './SkipButton';\r\nimport NextButton from './NextButton';\r\nimport DoneButton from './DoneButton';\r\nimport NextContainer from './NextContainer';\r\nimport Item from './Item';\r\nimport { ISliderIntro } from 'src/interfaces/ISliderIntro.interface';\r\nimport { IItem } from 'src/interfaces/IItem.interface';\r\nimport PrevContainer from './PrevContainer';\r\nimport DotContainer from './DotContainer';\r\nimport StatusBarContainer from './StatusBarContainer';\r\n\r\nconst setDefaultState = (setSlide: (arg0: ISlide) => void) => {\r\n  setSlide({\r\n    active: 0,\r\n    previous: 0,\r\n    marginLeft: 0,\r\n    dotMarginLeft: 0,\r\n    expectOpacityOfNext: 1,\r\n    expectOpacityOfDone: 0,\r\n    expectOpacityOfSkip: 1,\r\n    animations: {\r\n      _moveSlideX: new Animated.Value(0),\r\n      _moveSlideDotX: new Animated.Value(0),\r\n      _moveSlideDotMarginX: new Animated.Value(0),\r\n      _opacityOfNextButton: new Animated.Value(0),\r\n      _opacityOfDoneButton: new Animated.Value(0),\r\n      _opacityOfSkipButton: new Animated.Value(0),\r\n    },\r\n  });\r\n};\r\n\r\nconst goToNewSlide = (\r\n  newSlide: number,\r\n  slide: ISlide,\r\n  setSlide: (arg0: ISlide) => void,\r\n  numberOfSlide: number,\r\n  onDone: () => void,\r\n  navContainerMaxSize: number,\r\n  dotWidth: number,\r\n  deviceMaxWidth: number\r\n) => {\r\n  if (newSlide < 0) {\r\n    return;\r\n  }\r\n  if (newSlide > numberOfSlide - 1) {\r\n    setDefaultState(setSlide);\r\n    onDone();\r\n    return;\r\n  }\r\n\r\n  let expectOpacityOfNext = 0;\r\n  let expectOpacityOfDone = 0;\r\n  let expectOpacityOfSkip = 0;\r\n  let expectedMarginLeft = 0;\r\n  let expectedMarginLeftDot =\r\n    (newSlide * (navContainerMaxSize - numberOfSlide * dotWidth)) /\r\n      (numberOfSlide - 1) +\r\n    newSlide * dotWidth;\r\n\r\n  if (newSlide === numberOfSlide - 1) {\r\n    expectOpacityOfNext = 0;\r\n    expectOpacityOfDone = 1;\r\n    expectOpacityOfSkip = 0;\r\n  } else {\r\n    expectOpacityOfNext = 1;\r\n    expectOpacityOfDone = 0;\r\n    expectOpacityOfSkip = 1;\r\n  }\r\n\r\n  const { active, marginLeft, animations } = slide;\r\n  const {\r\n    _moveSlideX,\r\n    _moveSlideDotX,\r\n    _moveSlideDotMarginX,\r\n    _opacityOfNextButton,\r\n    _opacityOfDoneButton,\r\n    _opacityOfSkipButton,\r\n  } = animations;\r\n\r\n  if (newSlide > active) {\r\n    expectedMarginLeft = -(newSlide * deviceMaxWidth);\r\n  } else if (newSlide < active) {\r\n    expectedMarginLeft = -(newSlide * deviceMaxWidth);\r\n  } else {\r\n    expectedMarginLeft = marginLeft;\r\n  }\r\n  setSlide({\r\n    active: newSlide,\r\n    previous: active,\r\n    dotMarginLeft: expectedMarginLeftDot,\r\n    marginLeft: expectedMarginLeft,\r\n    expectOpacityOfNext: expectOpacityOfNext,\r\n    expectOpacityOfDone: expectOpacityOfDone,\r\n    expectOpacityOfSkip: expectOpacityOfSkip,\r\n    animations: {\r\n      _moveSlideX: _moveSlideX,\r\n      _moveSlideDotX: _moveSlideDotX,\r\n      _moveSlideDotMarginX: _moveSlideDotMarginX,\r\n      _opacityOfNextButton: _opacityOfNextButton,\r\n      _opacityOfDoneButton: _opacityOfDoneButton,\r\n      _opacityOfSkipButton: _opacityOfSkipButton,\r\n    },\r\n  });\r\n};\r\n\r\nconst _onGestureEvent = (\r\n  translationX: number,\r\n  slide: ISlide,\r\n  dotMaxPossibleWidth: number,\r\n  deviceMaxWidth: number,\r\n  dotWidth: number,\r\n  slidesMaxWidth: number\r\n) => {\r\n  const { marginLeft, dotMarginLeft, animations } = slide;\r\n  const { _moveSlideX, _moveSlideDotX, _moveSlideDotMarginX } = animations;\r\n  const newValue = translationX + marginLeft;\r\n  const newDotWidthRawValue =\r\n    dotMaxPossibleWidth / (deviceMaxWidth / translationX);\r\n  const newDotWidthValue =\r\n    translationX < 0 ? -1 * newDotWidthRawValue : newDotWidthRawValue;\r\n\r\n  if (newValue > 0) {\r\n    _moveSlideDotMarginX.setValue(dotMarginLeft);\r\n    _moveSlideX.setValue(0);\r\n    _moveSlideDotX.setValue(dotWidth);\r\n  } else if (newValue < -slidesMaxWidth) {\r\n    _moveSlideDotMarginX.setValue(dotMarginLeft);\r\n    _moveSlideX.setValue(marginLeft);\r\n    _moveSlideDotX.setValue(dotWidth);\r\n  } else {\r\n    _moveSlideX.setValue(newValue);\r\n\r\n    if (newDotWidthValue <= dotWidth) {\r\n      _moveSlideDotMarginX.setValue(dotMarginLeft);\r\n      _moveSlideDotX.setValue(dotWidth);\r\n    } else {\r\n      if (translationX < 0) {\r\n        _moveSlideDotMarginX.setValue(dotMarginLeft);\r\n      } else {\r\n        _moveSlideDotMarginX.setValue(\r\n          dotMarginLeft - newDotWidthValue + dotWidth\r\n        );\r\n      }\r\n      _moveSlideDotX.setValue(newDotWidthValue);\r\n    }\r\n  }\r\n};\r\n\r\nconst _onHandlerStateChange = (\r\n  translationX: number,\r\n  slide: ISlide,\r\n  slidesMaxWidth: number,\r\n  limitToSlide: number,\r\n  setSlide: (arg0: ISlide) => void,\r\n  numberOfSlide: number,\r\n  onDone: () => void,\r\n  navContainerMaxSize: number,\r\n  dotWidth: number,\r\n  deviceMaxWidth: number\r\n) => {\r\n  const { marginLeft, active } = slide;\r\n  const newValue = translationX + marginLeft;\r\n  if (newValue <= 0 && newValue >= -slidesMaxWidth) {\r\n    let absoluteTranslation = 0;\r\n    if (translationX < 0) {\r\n      absoluteTranslation = translationX * -1;\r\n      if (absoluteTranslation > limitToSlide) {\r\n        goToNewSlide(\r\n          active + 1,\r\n          slide,\r\n          setSlide,\r\n          numberOfSlide,\r\n          onDone,\r\n          navContainerMaxSize,\r\n          dotWidth,\r\n          deviceMaxWidth\r\n        );\r\n      } else {\r\n        goToNewSlide(\r\n          active,\r\n          slide,\r\n          setSlide,\r\n          numberOfSlide,\r\n          onDone,\r\n          navContainerMaxSize,\r\n          dotWidth,\r\n          deviceMaxWidth\r\n        );\r\n      }\r\n    } else {\r\n      absoluteTranslation = translationX;\r\n      if (absoluteTranslation > limitToSlide) {\r\n        goToNewSlide(\r\n          active - 1,\r\n          slide,\r\n          setSlide,\r\n          numberOfSlide,\r\n          onDone,\r\n          navContainerMaxSize,\r\n          dotWidth,\r\n          deviceMaxWidth\r\n        );\r\n      } else {\r\n        goToNewSlide(\r\n          active,\r\n          slide,\r\n          setSlide,\r\n          numberOfSlide,\r\n          onDone,\r\n          navContainerMaxSize,\r\n          dotWidth,\r\n          deviceMaxWidth\r\n        );\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst onBackPress = (\r\n  backHandlerBehaviour: 'activeMinusOne' | 'previous',\r\n  slide: ISlide,\r\n  setSlide: (arg0: ISlide) => void,\r\n  numberOfSlide: number,\r\n  onDone: () => void,\r\n  navContainerMaxSize: number,\r\n  dotWidth: number,\r\n  deviceMaxWidth: number\r\n) => {\r\n  const { active, previous } = slide;\r\n  backHandlerBehaviour === 'activeMinusOne'\r\n    ? goToNewSlide(\r\n        active - 1,\r\n        slide,\r\n        setSlide,\r\n        numberOfSlide,\r\n        onDone,\r\n        navContainerMaxSize,\r\n        dotWidth,\r\n        deviceMaxWidth\r\n      )\r\n    : goToNewSlide(\r\n        previous,\r\n        slide,\r\n        setSlide,\r\n        numberOfSlide,\r\n        onDone,\r\n        navContainerMaxSize,\r\n        dotWidth,\r\n        deviceMaxWidth\r\n      );\r\n  return true;\r\n};\r\n\r\nconst defaultProps: ISliderIntro = {\r\n  data: [],\r\n  renderItem: (item: IItem) => {\r\n    const {\r\n      index,\r\n      title,\r\n      text,\r\n      image,\r\n      backgroundColor,\r\n      activeLanguage,\r\n      link,\r\n      slideMaxHeightPercent,\r\n    } = item;\r\n    return (\r\n      <Item\r\n        key={index}\r\n        index={index}\r\n        title={title}\r\n        text={text}\r\n        image={image}\r\n        backgroundColor={backgroundColor}\r\n        activeLanguage={activeLanguage}\r\n        link={link}\r\n        slideMaxHeightPercent={slideMaxHeightPercent}\r\n      />\r\n    );\r\n  },\r\n  navigationBarBottom: 0,\r\n  navigationBarHeight: 70,\r\n  animateSlideSpeed: 15,\r\n  navContainerMaxSizePercent: 0.5,\r\n  dotWidth: 12,\r\n  fixDotOpacity: 0.35,\r\n  fixDotBackgroundColor: 'grey',\r\n  animatedDotBackgroundColor: 'white',\r\n  animateDotSpeed: 8,\r\n  animateDotBouncing: 2,\r\n  backHandlerBehaviour: 'activeMinusOne',\r\n  hasReactNavigation: false,\r\n  useCustomBackHandlerEffect: () => {},\r\n  skipLabel: 'Skip',\r\n  nextLabel: 'Next',\r\n  doneLabel: 'Done',\r\n  renderSkipButton: (skipLabel: string | undefined) => (\r\n    <SkipButton skipLabel={skipLabel} />\r\n  ),\r\n  renderNextButton: (nextLabel: string | undefined) => (\r\n    <NextButton nextLabel={nextLabel} />\r\n  ),\r\n  renderDoneButton: (doneLabel: string | undefined) => (\r\n    <DoneButton doneLabel={doneLabel} />\r\n  ),\r\n  onDone: () => {},\r\n  onSkip: () => {},\r\n  showLeftButton: true,\r\n  leftButtonType: 'skip',\r\n  columnButtonStyle: false,\r\n  showStatusBar: false,\r\n  statusBarColor: '#febe29',\r\n};\r\n\r\nexport function SliderIntro({\r\n  data,\r\n  renderItem,\r\n  navigationBarBottom,\r\n  navigationBarHeight,\r\n  animateSlideSpeed,\r\n  navContainerMaxSizePercent,\r\n  dotWidth,\r\n  fixDotOpacity,\r\n  fixDotBackgroundColor,\r\n  animatedDotBackgroundColor,\r\n  animateDotSpeed,\r\n  animateDotBouncing,\r\n  backHandlerBehaviour,\r\n  hasReactNavigation,\r\n  useCustomBackHandlerEffect,\r\n  skipLabel,\r\n  nextLabel,\r\n  doneLabel,\r\n  renderSkipButton,\r\n  renderNextButton,\r\n  renderDoneButton,\r\n  onSkip,\r\n  onDone,\r\n  showLeftButton,\r\n  leftButtonType,\r\n  columnButtonStyle,\r\n  showStatusBar,\r\n  statusBarColor,\r\n}: ISliderIntro) {\r\n  const [panResponder, setPanResponder] = useState(PanResponder.create({}));\r\n  const [slide, setSlide] = useState<ISlide>({\r\n    active: 0,\r\n    previous: 0,\r\n    marginLeft: 0,\r\n    dotMarginLeft: 0,\r\n    expectOpacityOfNext: 1,\r\n    expectOpacityOfDone: 0,\r\n    expectOpacityOfSkip: 1,\r\n    animations: {\r\n      _moveSlideX: new Animated.Value(0),\r\n      _moveSlideDotX: new Animated.Value(0),\r\n      _moveSlideDotMarginX: new Animated.Value(0),\r\n      _opacityOfNextButton: new Animated.Value(0),\r\n      _opacityOfDoneButton: new Animated.Value(0),\r\n      _opacityOfSkipButton: new Animated.Value(0),\r\n    },\r\n  });\r\n\r\n  const { length: numberOfSlide = 1 } = data;\r\n  const arrayOfSlideIndex = [...Array(numberOfSlide).keys()];\r\n  const deviceMaxWidth = Dimensions.get('window').width;\r\n  const limitToSlide = deviceMaxWidth * 0.5;\r\n  const slidesMaxWidth = (numberOfSlide - 1) * deviceMaxWidth;\r\n  const navContainerMaxSize = deviceMaxWidth * navContainerMaxSizePercent;\r\n  const buttonsMaxSize = (deviceMaxWidth - navContainerMaxSize) / 2 - 1;\r\n  const dotMaxPossibleWidth = navContainerMaxSize / (numberOfSlide - 1) + 9;\r\n\r\n  const {\r\n    active,\r\n    marginLeft,\r\n    animations,\r\n    dotMarginLeft,\r\n    expectOpacityOfNext,\r\n    expectOpacityOfDone,\r\n    expectOpacityOfSkip,\r\n  } = slide;\r\n  const {\r\n    _moveSlideX,\r\n    _moveSlideDotX,\r\n    _moveSlideDotMarginX,\r\n    _opacityOfNextButton,\r\n    _opacityOfDoneButton,\r\n    _opacityOfSkipButton,\r\n  } = animations;\r\n\r\n  const isLastSlide = active + 1 === numberOfSlide;\r\n\r\n  useEffect(() => {\r\n    const panResponderItem = PanResponder.create({\r\n      onStartShouldSetPanResponder: () => false,\r\n      onMoveShouldSetPanResponder: (_, gestureState) => {\r\n        return gestureState.dx != 0 && gestureState.dy != 0;\r\n      },\r\n      onMoveShouldSetPanResponderCapture: (_, gestureState) => {\r\n        return gestureState.dx != 0 && gestureState.dy != 0;\r\n      },\r\n      onStartShouldSetPanResponderCapture: () => false,\r\n      onPanResponderMove: (_, gesture) => {\r\n        _onGestureEvent(\r\n          gesture.dx,\r\n          slide,\r\n          dotMaxPossibleWidth,\r\n          deviceMaxWidth,\r\n          dotWidth,\r\n          slidesMaxWidth\r\n        );\r\n      },\r\n      onPanResponderRelease: (_, gesture) => {\r\n        _onHandlerStateChange(\r\n          gesture.dx,\r\n          slide,\r\n          slidesMaxWidth,\r\n          limitToSlide,\r\n          setSlide,\r\n          numberOfSlide,\r\n          onDone,\r\n          navContainerMaxSize,\r\n          dotWidth,\r\n          deviceMaxWidth\r\n        );\r\n      },\r\n    });\r\n    setPanResponder(panResponderItem);\r\n    const animateSlide = Animated.spring(_moveSlideX, {\r\n      toValue: marginLeft,\r\n      speed: animateSlideSpeed,\r\n      bounciness: animateDotBouncing,\r\n      useNativeDriver: false,\r\n    });\r\n    const animateDotWidth = Animated.spring(_moveSlideDotX, {\r\n      toValue: dotWidth,\r\n      speed: animateDotSpeed,\r\n      bounciness: animateDotBouncing,\r\n      useNativeDriver: false,\r\n    });\r\n    const animateDotMarginLeft = Animated.spring(_moveSlideDotMarginX, {\r\n      toValue: dotMarginLeft,\r\n      speed: animateDotSpeed,\r\n      bounciness: animateDotBouncing,\r\n      useNativeDriver: false,\r\n    });\r\n    const animateOpacityOfNext = Animated.spring(_opacityOfNextButton, {\r\n      toValue: expectOpacityOfNext,\r\n      speed: animateDotSpeed,\r\n      bounciness: animateDotBouncing,\r\n      useNativeDriver: false,\r\n    });\r\n    const animateOpacityOfDone = Animated.spring(_opacityOfDoneButton, {\r\n      toValue: expectOpacityOfDone,\r\n      speed: animateDotSpeed,\r\n      bounciness: animateDotBouncing,\r\n      useNativeDriver: false,\r\n    });\r\n    const animateOpacityOfSkip = Animated.spring(_opacityOfSkipButton, {\r\n      toValue: expectOpacityOfSkip,\r\n      speed: animateDotSpeed,\r\n      bounciness: animateDotBouncing,\r\n      useNativeDriver: false,\r\n    });\r\n    Animated.parallel([\r\n      animateSlide,\r\n      animateDotWidth,\r\n      animateDotMarginLeft,\r\n      animateOpacityOfNext,\r\n      animateOpacityOfDone,\r\n      animateOpacityOfSkip,\r\n    ]).start();\r\n  }, [slide]);\r\n\r\n  // Based on React navigation lifecycle issue:\r\n  // https://reactnavigation.org/docs/custom-android-back-button-handling/#why-not-use-component-lifecycle-methods\r\n  if (hasReactNavigation) {\r\n    useCustomBackHandlerEffect(\r\n      active,\r\n      onBackPress,\r\n      backHandlerBehaviour,\r\n      slide,\r\n      setSlide,\r\n      numberOfSlide,\r\n      onDone,\r\n      navContainerMaxSize,\r\n      dotWidth,\r\n      deviceMaxWidth\r\n    );\r\n  } else {\r\n    useEffect(() => {\r\n      BackHandler.addEventListener('hardwareBackPress', () =>\r\n        onBackPress(\r\n          backHandlerBehaviour,\r\n          slide,\r\n          setSlide,\r\n          numberOfSlide,\r\n          onDone,\r\n          navContainerMaxSize,\r\n          dotWidth,\r\n          deviceMaxWidth\r\n        )\r\n      );\r\n\r\n      return () =>\r\n        BackHandler.removeEventListener('hardwareBackPress', () =>\r\n          onBackPress(\r\n            backHandlerBehaviour,\r\n            slide,\r\n            setSlide,\r\n            numberOfSlide,\r\n            onDone,\r\n            navContainerMaxSize,\r\n            dotWidth,\r\n            deviceMaxWidth\r\n          )\r\n        );\r\n    }, [active]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {showStatusBar && <StatusBarContainer backgroundColor={statusBarColor} />}\r\n      <Animated.View\r\n        style={[\r\n          styles.container,\r\n          {\r\n            maxWidth: numberOfSlide * deviceMaxWidth,\r\n            marginLeft: _moveSlideX,\r\n          },\r\n        ]}\r\n        {...panResponder.panHandlers}\r\n      >\r\n        {data.map((item: IItem, index: number) => {\r\n          return (\r\n            <View\r\n              key={index}\r\n              style={{\r\n                width: deviceMaxWidth,\r\n              }}\r\n            >\r\n              {renderItem(item)}\r\n            </View>\r\n          );\r\n        })}\r\n      </Animated.View>\r\n      <View\r\n        style={[\r\n          styles.navContainer,\r\n          {\r\n            bottom: navigationBarBottom,\r\n            height: navigationBarHeight,\r\n            maxHeight: navigationBarHeight,\r\n          },\r\n        ]}\r\n      >\r\n        <View\r\n          style={[\r\n            styles.navigation,\r\n            { flexDirection: columnButtonStyle ? 'column' : 'row' },\r\n          ]}\r\n        >\r\n          {columnButtonStyle ? (\r\n            <>\r\n              <DotContainer\r\n                navContainerMaxSize={navContainerMaxSize}\r\n                arrayOfSlideIndex={arrayOfSlideIndex}\r\n                fixDotBackgroundColor={fixDotBackgroundColor}\r\n                fixDotOpacity={fixDotOpacity}\r\n                dotWidth={dotWidth}\r\n                _moveSlideDotX={_moveSlideDotX}\r\n                _moveSlideDotMarginX={_moveSlideDotMarginX}\r\n                animatedDotBackgroundColor={animatedDotBackgroundColor}\r\n              />\r\n              <NextContainer\r\n                goToNewSlide={goToNewSlide}\r\n                slide={slide}\r\n                setSlide={setSlide}\r\n                numberOfSlide={numberOfSlide}\r\n                onDone={onDone}\r\n                navContainerMaxSize={navContainerMaxSize}\r\n                dotWidth={dotWidth}\r\n                deviceMaxWidth={deviceMaxWidth}\r\n                renderNextButton={() => renderNextButton(nextLabel)}\r\n                renderDoneButton={() => renderDoneButton(doneLabel)}\r\n                isLastSlide={isLastSlide}\r\n                buttonsMaxSize={buttonsMaxSize}\r\n              />\r\n              <PrevContainer\r\n                setDefaultState={() => setDefaultState(setSlide)}\r\n                onSkip={onSkip}\r\n                buttonsMaxSize={buttonsMaxSize}\r\n                _opacityOfSkipButton={_opacityOfSkipButton}\r\n                renderSkipButton={() => renderSkipButton(skipLabel)}\r\n                type={leftButtonType}\r\n                goToNewSlide={goToNewSlide}\r\n                slide={slide}\r\n                setSlide={setSlide}\r\n                numberOfSlide={numberOfSlide}\r\n                onDone={onDone}\r\n                navContainerMaxSize={navContainerMaxSize}\r\n                dotWidth={dotWidth}\r\n                deviceMaxWidth={deviceMaxWidth}\r\n                showLeftButton={showLeftButton}\r\n              />\r\n            </>\r\n          ) : (\r\n            <>\r\n              <PrevContainer\r\n                setDefaultState={() => setDefaultState(setSlide)}\r\n                onSkip={onSkip}\r\n                buttonsMaxSize={buttonsMaxSize}\r\n                _opacityOfSkipButton={_opacityOfSkipButton}\r\n                renderSkipButton={() => renderSkipButton(skipLabel)}\r\n                type={leftButtonType}\r\n                goToNewSlide={goToNewSlide}\r\n                slide={slide}\r\n                setSlide={setSlide}\r\n                numberOfSlide={numberOfSlide}\r\n                onDone={onDone}\r\n                navContainerMaxSize={navContainerMaxSize}\r\n                dotWidth={dotWidth}\r\n                deviceMaxWidth={deviceMaxWidth}\r\n                showLeftButton={showLeftButton}\r\n              />\r\n              <DotContainer\r\n                navContainerMaxSize={navContainerMaxSize}\r\n                arrayOfSlideIndex={arrayOfSlideIndex}\r\n                fixDotBackgroundColor={fixDotBackgroundColor}\r\n                fixDotOpacity={fixDotOpacity}\r\n                dotWidth={dotWidth}\r\n                _moveSlideDotX={_moveSlideDotX}\r\n                _moveSlideDotMarginX={_moveSlideDotMarginX}\r\n                animatedDotBackgroundColor={animatedDotBackgroundColor}\r\n              />\r\n              <NextContainer\r\n                goToNewSlide={goToNewSlide}\r\n                slide={slide}\r\n                setSlide={setSlide}\r\n                numberOfSlide={numberOfSlide}\r\n                onDone={onDone}\r\n                navContainerMaxSize={navContainerMaxSize}\r\n                dotWidth={dotWidth}\r\n                deviceMaxWidth={deviceMaxWidth}\r\n                renderNextButton={() => renderNextButton(nextLabel)}\r\n                renderDoneButton={() => renderDoneButton(doneLabel)}\r\n                isLastSlide={isLastSlide}\r\n                buttonsMaxSize={buttonsMaxSize}\r\n              />\r\n            </>\r\n          )}\r\n        </View>\r\n      </View>\r\n    </>\r\n  );\r\n}\r\n\r\nSliderIntro.defaultProps = defaultProps;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n  },\r\n  navContainer: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    maxWidth: '100%',\r\n    flex: 1,\r\n    flexDirection: 'column',\r\n    justifyContent: 'flex-end',\r\n    alignItems: 'center',\r\n  },\r\n  navigation: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n  },\r\n  prevContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  prevButton: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  prevText: {\r\n    textTransform: 'uppercase',\r\n    fontWeight: 'bold',\r\n    color: 'white',\r\n    fontSize: 14,\r\n  },\r\n});\r\n\r\nexport default SliderIntro;\r\n"]}