"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const handlePress = (onSkip, setDefaultState, type, goToNewSlide, slide, setSlide, numberOfSlide, onDone, navContainerMaxSize, dotWidth, deviceMaxWidth) => {
  const {
    active
  } = slide;

  if (type === 'skip') {
    setDefaultState();
    onSkip();
    return;
  }

  goToNewSlide(active - 1, slide, setSlide, numberOfSlide, onDone, navContainerMaxSize, dotWidth, deviceMaxWidth);
};

const PrevContainer = ({
  setDefaultState,
  onSkip,
  buttonsMaxSize,
  _opacityOfSkipButton,
  renderSkipButton,
  type,
  goToNewSlide,
  slide,
  setSlide,
  numberOfSlide,
  onDone,
  navContainerMaxSize,
  dotWidth,
  deviceMaxWidth,
  showLeftButton
}) => {
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.buttonContainer, {
      maxWidth: buttonsMaxSize
    }]
  }, showLeftButton && /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    onPress: () => handlePress(onSkip, setDefaultState, type, goToNewSlide, slide, setSlide, numberOfSlide, onDone, navContainerMaxSize, dotWidth, deviceMaxWidth)
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    style: {
      maxWidth: buttonsMaxSize,
      opacity: _opacityOfSkipButton
    }
  }, renderSkipButton())));
};

const styles = _reactNative.StyleSheet.create({
  buttonContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  }
});

var _default = PrevContainer;
exports.default = _default;
//# sourceMappingURL=PrevContainer.js.map