{"version":3,"sources":["PrevContainer.tsx"],"names":["handlePress","onSkip","setDefaultState","type","goToNewSlide","slide","setSlide","numberOfSlide","onDone","navContainerMaxSize","dotWidth","deviceMaxWidth","active","PrevContainer","buttonsMaxSize","_opacityOfSkipButton","renderSkipButton","showLeftButton","styles","buttonContainer","maxWidth","opacity","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":";;;;;;;AAAA;;AACA;;;;AAKA,MAAMA,WAAW,GAAG,CAClBC,MADkB,EAElBC,eAFkB,EAGlBC,IAHkB,EAIlBC,YAJkB,EAclBC,KAdkB,EAelBC,QAfkB,EAgBlBC,aAhBkB,EAiBlBC,MAjBkB,EAkBlBC,mBAlBkB,EAmBlBC,QAnBkB,EAoBlBC,cApBkB,KAqBf;AACH,QAAM;AAAEC,IAAAA;AAAF,MAAaP,KAAnB;;AACA,MAAIF,IAAI,KAAK,MAAb,EAAqB;AACnBD,IAAAA,eAAe;AACfD,IAAAA,MAAM;AACN;AACD;;AACDG,EAAAA,YAAY,CACVQ,MAAM,GAAG,CADC,EAEVP,KAFU,EAGVC,QAHU,EAIVC,aAJU,EAKVC,MALU,EAMVC,mBANU,EAOVC,QAPU,EAQVC,cARU,CAAZ;AAUD,CAtCD;;AAwCA,MAAME,aAAa,GAAG,CAAC;AACrBX,EAAAA,eADqB;AAErBD,EAAAA,MAFqB;AAGrBa,EAAAA,cAHqB;AAIrBC,EAAAA,oBAJqB;AAKrBC,EAAAA,gBALqB;AAMrBb,EAAAA,IANqB;AAOrBC,EAAAA,YAPqB;AAQrBC,EAAAA,KARqB;AASrBC,EAAAA,QATqB;AAUrBC,EAAAA,aAVqB;AAWrBC,EAAAA,MAXqB;AAYrBC,EAAAA,mBAZqB;AAarBC,EAAAA,QAbqB;AAcrBC,EAAAA,cAdqB;AAerBM,EAAAA;AAfqB,CAAD,KAgBA;AACpB,sBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAACC,MAAM,CAACC,eAAR,EAAyB;AAAEC,MAAAA,QAAQ,EAAEN;AAAZ,KAAzB;AAAb,KACGG,cAAc,iBACb,6BAAC,6BAAD;AACE,IAAA,OAAO,EAAE,MACPjB,WAAW,CACTC,MADS,EAETC,eAFS,EAGTC,IAHS,EAITC,YAJS,EAKTC,KALS,EAMTC,QANS,EAOTC,aAPS,EAQTC,MARS,EASTC,mBATS,EAUTC,QAVS,EAWTC,cAXS;AAFf,kBAiBE,6BAAC,qBAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE;AACLS,MAAAA,QAAQ,EAAEN,cADL;AAELO,MAAAA,OAAO,EAAEN;AAFJ;AADT,KAMGC,gBAAgB,EANnB,CAjBF,CAFJ,CADF;AAgCD,CAjDD;;AAkDA,MAAME,MAAM,GAAGI,wBAAWC,MAAX,CAAkB;AAC/BJ,EAAAA,eAAe,EAAE;AACfK,IAAAA,IAAI,EAAE,CADS;AAEfC,IAAAA,cAAc,EAAE,QAFD;AAGfC,IAAAA,UAAU,EAAE;AAHG;AADc,CAAlB,CAAf;;eAQeb,a","sourcesContent":["import React from 'react';\r\nimport { View, TouchableOpacity, Animated } from 'react-native';\r\nimport { StyleSheet } from 'react-native';\r\nimport { IPrevContainer } from 'src/interfaces/IPrevContainer.interface';\r\nimport { ISlide } from 'src/interfaces/ISlide.interface';\r\n\r\nconst handlePress = (\r\n  onSkip: () => void,\r\n  setDefaultState: () => void,\r\n  type: 'previous' | 'skip',\r\n  goToNewSlide: (\r\n    nextActive: number,\r\n    slide: ISlide,\r\n    setSlide: (arg0: ISlide) => void,\r\n    numberOfSlide: number,\r\n    onDone: () => void,\r\n    navContainerMaxSize: number,\r\n    dotWidth: number,\r\n    deviceMaxWidth: number\r\n  ) => void,\r\n  slide: ISlide,\r\n  setSlide: (arg0: ISlide) => void,\r\n  numberOfSlide: number,\r\n  onDone: () => void,\r\n  navContainerMaxSize: number,\r\n  dotWidth: number,\r\n  deviceMaxWidth: number\r\n) => {\r\n  const { active } = slide;\r\n  if (type === 'skip') {\r\n    setDefaultState();\r\n    onSkip();\r\n    return;\r\n  }\r\n  goToNewSlide(\r\n    active - 1,\r\n    slide,\r\n    setSlide,\r\n    numberOfSlide,\r\n    onDone,\r\n    navContainerMaxSize,\r\n    dotWidth,\r\n    deviceMaxWidth\r\n  );\r\n};\r\n\r\nconst PrevContainer = ({\r\n  setDefaultState,\r\n  onSkip,\r\n  buttonsMaxSize,\r\n  _opacityOfSkipButton,\r\n  renderSkipButton,\r\n  type,\r\n  goToNewSlide,\r\n  slide,\r\n  setSlide,\r\n  numberOfSlide,\r\n  onDone,\r\n  navContainerMaxSize,\r\n  dotWidth,\r\n  deviceMaxWidth,\r\n  showLeftButton,\r\n}: IPrevContainer) => {\r\n  return (\r\n    <View style={[styles.buttonContainer, { maxWidth: buttonsMaxSize }]}>\r\n      {showLeftButton && (\r\n        <TouchableOpacity\r\n          onPress={() =>\r\n            handlePress(\r\n              onSkip,\r\n              setDefaultState,\r\n              type,\r\n              goToNewSlide,\r\n              slide,\r\n              setSlide,\r\n              numberOfSlide,\r\n              onDone,\r\n              navContainerMaxSize,\r\n              dotWidth,\r\n              deviceMaxWidth\r\n            )\r\n          }\r\n        >\r\n          <Animated.View\r\n            style={{\r\n              maxWidth: buttonsMaxSize,\r\n              opacity: _opacityOfSkipButton,\r\n            }}\r\n          >\r\n            {renderSkipButton()}\r\n          </Animated.View>\r\n        </TouchableOpacity>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\nconst styles = StyleSheet.create({\r\n  buttonContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default PrevContainer;\r\n"]}