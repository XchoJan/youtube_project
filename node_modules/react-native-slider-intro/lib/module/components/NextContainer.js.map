{"version":3,"sources":["NextContainer.tsx"],"names":["React","View","TouchableOpacity","Animated","StyleSheet","NextContainer","goToNewSlide","slide","setSlide","numberOfSlide","onDone","navContainerMaxSize","dotWidth","deviceMaxWidth","renderNextButton","renderDoneButton","isLastSlide","buttonsMaxSize","active","animations","_opacityOfNextButton","_opacityOfDoneButton","styles","buttonContainer","maxWidth","opacity","create","flex","justifyContent","alignItems"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,gBAAf,EAAiCC,QAAjC,EAA2CC,UAA3C,QAA6D,cAA7D;;AAGA,MAAMC,aAAa,GAAG,CAAC;AACrBC,EAAAA,YADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,QAHqB;AAIrBC,EAAAA,aAJqB;AAKrBC,EAAAA,MALqB;AAMrBC,EAAAA,mBANqB;AAOrBC,EAAAA,QAPqB;AAQrBC,EAAAA,cARqB;AASrBC,EAAAA,gBATqB;AAUrBC,EAAAA,gBAVqB;AAWrBC,EAAAA,WAXqB;AAYrBC,EAAAA;AAZqB,CAAD,KAaA;AACpB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAyBZ,KAA/B;AACA,QAAM;AAAEa,IAAAA,oBAAF;AAAwBC,IAAAA;AAAxB,MAAiDF,UAAvD;AACA,sBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACG,MAAM,CAACC,eAAR,EAAyB;AAAEC,MAAAA,QAAQ,EAAEP;AAAZ,KAAzB;AAAb,kBACE,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAE,MACPX,YAAY,CACVY,MAAM,GAAG,CADC,EAEVX,KAFU,EAGVC,QAHU,EAIVC,aAJU,EAKVC,MALU,EAMVC,mBANU,EAOVC,QAPU,EAQVC,cARU;AAFhB,KAcG,CAACG,WAAD,gBACC,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE;AAAES,MAAAA,OAAO,EAAEL;AAAX;AAAtB,KACGN,gBAAgB,EADnB,CADD,gBAKC,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE;AAAEW,MAAAA,OAAO,EAAEJ;AAAX;AAAtB,KACGN,gBAAgB,EADnB,CAnBJ,CADF,CADF;AA4BD,CA5CD;;AA8CA,MAAMO,MAAM,GAAGlB,UAAU,CAACsB,MAAX,CAAkB;AAC/BH,EAAAA,eAAe,EAAE;AACfI,IAAAA,IAAI,EAAE,CADS;AAEfC,IAAAA,cAAc,EAAE,QAFD;AAGfC,IAAAA,UAAU,EAAE;AAHG;AADc,CAAlB,CAAf;AAQA,eAAexB,aAAf","sourcesContent":["import React from 'react';\r\nimport { View, TouchableOpacity, Animated, StyleSheet } from 'react-native';\r\nimport { INextContainer } from 'src/interfaces/INextContainer.interface';\r\n\r\nconst NextContainer = ({\r\n  goToNewSlide,\r\n  slide,\r\n  setSlide,\r\n  numberOfSlide,\r\n  onDone,\r\n  navContainerMaxSize,\r\n  dotWidth,\r\n  deviceMaxWidth,\r\n  renderNextButton,\r\n  renderDoneButton,\r\n  isLastSlide,\r\n  buttonsMaxSize,\r\n}: INextContainer) => {\r\n  const { active, animations } = slide;\r\n  const { _opacityOfNextButton, _opacityOfDoneButton } = animations;\r\n  return (\r\n    <View style={[styles.buttonContainer, { maxWidth: buttonsMaxSize }]}>\r\n      <TouchableOpacity\r\n        onPress={() =>\r\n          goToNewSlide(\r\n            active + 1,\r\n            slide,\r\n            setSlide,\r\n            numberOfSlide,\r\n            onDone,\r\n            navContainerMaxSize,\r\n            dotWidth,\r\n            deviceMaxWidth\r\n          )\r\n        }\r\n      >\r\n        {!isLastSlide ? (\r\n          <Animated.View style={{ opacity: _opacityOfNextButton }}>\r\n            {renderNextButton()}\r\n          </Animated.View>\r\n        ) : (\r\n          <Animated.View style={{ opacity: _opacityOfDoneButton }}>\r\n            {renderDoneButton()}\r\n          </Animated.View>\r\n        )}\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  buttonContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nexport default NextContainer;\r\n"]}