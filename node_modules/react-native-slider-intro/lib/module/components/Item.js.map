{"version":3,"sources":["Item.tsx"],"names":["React","View","Text","TouchableOpacity","StyleSheet","Image","Linking","Dimensions","Item","index","backgroundColor","title","text","link","activeLanguage","image","slideMaxHeightPercent","deviceMaxHeight","get","height","language","slideHeight","styles","slide","container","maxHeight","Array","isArray","openURL","create","marginTop","flex","flexDirection","justifyContent","alignItems","fontSize","color","textAlign","marginLeft","marginRight","lineHeight","maxWidth","width","textDecorationLine"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  Image,\r\n  Linking,\r\n  Dimensions,\r\n} from 'react-native';\r\nimport { IItem } from '../interfaces/IItem.interface';\r\n\r\nconst Item = ({\r\n  index,\r\n  backgroundColor,\r\n  title,\r\n  text,\r\n  link,\r\n  activeLanguage,\r\n  image,\r\n  slideMaxHeightPercent,\r\n}: IItem) => {\r\n  const deviceMaxHeight = Dimensions.get('screen').height;\r\n  const language = activeLanguage || 'en';\r\n  const slideHeight = deviceMaxHeight * (slideMaxHeightPercent || 0.78);\r\n\r\n  return (\r\n    <View key={index} style={[styles.slide, { backgroundColor }]}>\r\n      <View\r\n        style={[\r\n          styles.container,\r\n          {\r\n            height: slideHeight,\r\n            maxHeight: slideHeight,\r\n          },\r\n        ]}\r\n      >\r\n        <Text style={styles.title}>\r\n          {Array.isArray(title) ? title[language] : title}\r\n        </Text>\r\n        {image && <Image style={styles.image} source={image} />}\r\n        <View>\r\n          <Text style={styles.text}>\r\n            {Array.isArray(text) ? text[language] : text}\r\n          </Text>\r\n          {link && (\r\n            <TouchableOpacity onPress={() => Linking.openURL(link)}>\r\n              <Text style={styles.link}>{link}</Text>\r\n            </TouchableOpacity>\r\n          )}\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    marginTop: 10,\r\n    flex: 1,\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center',\r\n    maxHeight: Dimensions.get('window').height * 0.85,\r\n  },\r\n  slide: {\r\n    flex: 1,\r\n    justifyContent: 'flex-start',\r\n    alignItems: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    color: 'white',\r\n    textAlign: 'center',\r\n  },\r\n  text: {\r\n    marginLeft: 20,\r\n    marginRight: 20,\r\n    lineHeight: 24,\r\n    fontSize: 15,\r\n    color: 'white',\r\n    textAlign: 'center',\r\n  },\r\n  image: {\r\n    maxWidth: Dimensions.get('window').width,\r\n    maxHeight: Dimensions.get('window').width,\r\n  },\r\n  link: {\r\n    marginLeft: 20,\r\n    marginRight: 20,\r\n    fontSize: 15,\r\n    color: '#2f39ff',\r\n    textDecorationLine: 'underline',\r\n    textAlign: 'center',\r\n  },\r\n});\r\n"]}